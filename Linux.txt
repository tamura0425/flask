########作業効率化、便利コマンド



tailコマンドにオプション {-f}を付けてソフトを動かす。
これで、動かしているソフトの状態を確認しながら、見ることができる

tail -200f ここに見たい場所を記載する（基本的にはlogファイルが置いてある場所）
使用例
tail -200f /var/log/messages

########tree コマンドが無い環境で tree コマンドを実現#########
pwd;find . | sort | sed '1d;s/^\.//;s/\/\([^/]*\)$/|--\1/;s/\/[^/|]*/|  /g'

########自分の入力したコマンドの確認　０表示ならOK　それ以外の数値がでたらエラー
echo $?

########------------------------------------------------------------------########

########プロセスが開いているファイルを表示########
オプション	意味
-P		ポート番号をサービス名に変換しない
-c		プロセス名を指定する
-i		ネットワークソケットファイルを表示する
-n		IPアドレスを表示する（名前解決しない）
-p		プロセスIDを指定する
例）
ポート番号を指定する
lsof -i:80
複数のオプション使用
lsof -i -n -P


########検索########

#####すべてのファイルの一覧が表示される。
find /
#####特定のファイル名で検索したい場合
find / -name passwd
find . -name "検索キーワード"
#####ルートディレクトリからマシン内の全ファイルの一覧を表示する
find / -print
find /root -name "*.txt"
#####カレントディレクトリ以下の全ファイルの一覧を表示する
find . -print
#####カレントディレクトリ以下の全ファイルの一覧を表示する
find /usr/local -print
########------------------------------------------------------------------########

########bosyu.csvファイル読込み行数を検索####
任意の変数=`cat /ファイルパス/ファイル名 | wc -l`


########該当箇所削除########
	and検索
$ grep スタートの検索文字列.*終わりの検索文字列 ファイル名

	or検索
grep –e 検索正規表現１ –e 検索正規表現２ ファイル名

	複合パターン
grep -e "スタートの検索文字列.*終わりの検索文字列"  -e "スタートの検索文字列.*終わりの検索文字列" ファイル名



指定した文字列を「含む行」を抽出するコマンド
$ cat ファイル名 | grep "単語"
	複数
$ cat ファイル名 | grep ""単語１|単語２|単語3"

指定した文字列を「含まない行」を抽出するためのコマンド
$ cat ファイル名 | egrep -v "単語"
	複数
$ cat ファイル名 | egrep -v "単語１|単語２|単語3"


########過去データ削除########

30日以上前のディレクトリを強制削除
find ./aaa -type d -mtime +30 | xargs rm -fr

########n日前より古いファイルをまとめて削除してみる
 find /root/test/ -mtime +2 -exec rm -f {} \;

########------------------------------------------------------------------########


########戻り値を判定 - logファイル作成時使用########
if [ $? -ne 0 ]; then
  # エラー処理
fi
########------------------------------------------------------------------########


########現在、実行しているプロセスを確認########
netstat -anp | grep (ポート番号記載)
 ps -a
 
########Linuxでプロセスを終了させるコマンド########
主なシグナル
1	SIGHUP	再起動
6	SIGABRT	中断
9	SIGKILL	強制終了
15	SIGTERM	終了
17	SIGSTOP	停止
18	SIGCONT	再開

例kill -9 プロセスID

代表的なポート番号とプロトコル
TCP 20 : FTP (データ)
TCP 21 : FTP (制御)
TCP 22 : SSH
TCP 23 : Telnet
TCP 25 : SMTP
UDP 53 : DNS
UDP 67 : DHCP（サーバ）
UDP 68 : DHCP（クライアント）
TCP 80 : HTTP
TCP 110 : POP3
UDP 123 : NTP
TCP 443 : HTTPS
WELL KNOWN PORT NUMBERS 0~1023
########------------------------------------------------------------------########

########バックアップ########

rsync 高速なファイル同期（バックアップ）を行う
rsync [オプション] コピー元 コピー先

rsync -av /tmp/from/ /tmp/to/

[オプション]
-a	コピー元のディレクトリを再帰的にオーナー・グループ・パーミッション・タイムスタンプをそのままコピーします。オプション -rlptgoD と同じです。
-g	グループをそのままコピーします。
-l	シンボリックリンクをそのまま（ターゲットの指定を変えずに）コピーします。
-o	オーナーをそのままコピーします。
-p	パーミッションをそのままコピーします。
-r	ディレクトリ内を再帰的にコピーします。
-t	タイムスタンプをそのままコピーします。
-u	コピー元とコピー先を比較し、追加・更新されたファイル・ディレクトリのみをコピーします。
-v	コピーしているファイル名やバイト数などの情報を表示します。
-z	通信を圧縮します。
-4	IPv4を使用します。
-6	IPv6を使用します。
--delete	コピー元にない（削除された）ファイルをコピー先で削除します。コピー元とコピー先を同期します。

#######世代管理バックアップ(shell)rsync使用例
BASEDIR="/backup" 
LATESTBKUP=$(ls $BASEDIR | grep backup- | tail -n 1) 
rsync -avh --link-dest="$BASEDIR/$LATESTBKUP" /usr/local/tomcat85 "/backup/${BACKUP}"
#３日前のデータを削除
find /backup  -name "backup-$(date +%Y%m%d -d '3 day ago')" | xargs rm -rf
#######

#######世代管理バックアップ(shell)rsync未使用
(rm コマンドを使用しえローテーションで行う)

### ローテーション実行 ###
	if [ -d ${BK_DIR3} ] ; then
		/bin/rm -rf ${BK_DIR3}
	fi
	if [ -d ${BK_DIR2} ] ; then
		/bin/mv ${BK_DIR2} ${BK_DIR3}
	else
		/bin/mkdir ${BK_DIR3}
	fi
	if [ -d ${BK_DIR1} ] ; then
		/bin/mv ${BK_DIR1} ${BK_DIR2}
	else
		/bin/mkdir ${BK_DIR2}
	fi
	if [ -d ${BK_DIR} ] ; then
		/bin/mv ${BK_DIR} ${BK_DIR1}
	else
		/bin/mkdir ${BK_DIR1}
	fi
	if [ -d ${BK_DIR3} ] ; then
		/bin/mv ${BK_DIR3} ${BK_DIR}
	fi

########------------------------------------------------------------------########




########自動起動(0時に起動)########
crontab -e

0 0 * * * /root/rsync.sh

########------------------------------------------------------------------########
[サービスの自動起動設定の一覧確認コマンド]

######## 設定確認全て
systemctl list-unit-files --type=service

######## 設定確認任意
systemctl list-unit-files -t service | grep サービス名

######## 設定確認
systemctl list-unit-files -t service

######## 自動起動on
systemctl enable サービス名.service

######## 自動起動off
systemctl disable サービス名.service

起動	systemctl start app
停止	systemctl stop app
再起動	systemctl restart app
リロード	systemctl reload app
自動起動を設定する	systemctl enable app
自動起動を無効にする	systemctl disable app
ステータスの表示	systemctl status app
アクティブかどうかの確認	systemctl is-active app
自動起動の設定確認	systemctl is-enabled app


########	Apache HTTP Server　起動　停止　再起動コマンド　
起動
/usr/local/apache2/bin/apachectl -k start
停止
/usr/local/apache2/bin/apachectl -k stop
再起動
/usr/local/apache2/bin/apachectl restart

########------------------------------------------------------------------########

########PostgreSQL を起
 pg_ctl -w start
#######Apache Tomcat を起動します。
/usr/local/tomcat/bin/catalina.sh start
/usr/local/tomcat/bin/catalina.sh stop
########date	日時の比較 
diff=$(expr `date -d"${today}" +%d` - `date -d"${ans}" +%d` / 60 / 60 / 24)
echo ${diff}

########------------------------------------------------------------------########


########置換方法一覧########!!!!!


########カレントディレクトリ配下の全ファイルの文字コードを一括変換########
find . -type f -name "*.（変更したい拡張子）" -exec nkf -wd --overwrite {} \;

/usr/bin/perl -pi -e "s/置換前文字列/置換後文字列/g" /ファイルパス

########特定のディレクトリ以下全てを削除########
find ディレクトリパス/. -type f -name '*.ファイル名' | xargs /usr/bin/perl -pi -e "s/変更前文字列//g"

########特定のディレクトリ以下全てを置換########
find ディレクトリパス/. -type f -name '*.ファイル名' | xargs /usr/bin/perl -pi -e "s/変更前文字列/変更後文字列/g"

以下使用例
find /var/www/html/kankou/event/. -type f -name '*.html' | xargs /usr/bin/perl -pi -e "s/<!-- event shimekiri02 shell  -->//g"

########------------------------------------------------------------------########


 ${変数名//置換前文字列/置換後文字列}
 
//バックスラッシュ/を → \/ に置換
sort 1.txt | sed -e 's/\//\\\\\//g' 1.txt > 2.txt

シェルスクリプトでYYYYMMDD → YYYY/MM/DD
{var:n:m} でシェル変数 $var の n 番目から m 個の文字を取り出せる
 YYYYMMDD=20130418
 echo ${YYYYMMDD:0:4}/${YYYYMMDD:4:2}/${YYYYMMDD:6:2}
2013/04/18
########------------------------------------------------------------------########


#########文字列連結する#########
ループを用いて文字列を連結する

for x in `cat os.txt`
do
 concat="$concat $x"
done
echo $concat

########shellでperlコマンドを使用記載方法#########
########perlで文字列置換########
perl -e 
/usr/bin/perl -e
-eはオプション

/usr/bin/perl -pi -e "s/置換前文字列/置換後文字列/g" /ファイルパス

########------------------------------------------------------------------########


【 expr 】コマンド――計算式や論理式を評価する
コマンド実行例
expr 100 + 20
（100と20を足した結果を出力）（画面1）

expr 100 "*" 20
（100と20を掛けた結果を出力）

expr 100 / 3
（100を3で割った結果のうち整数部分のみを出力）

########------------------------------------------------------------------########



########ファイルの有無を確認########
ファイルが無ければ次に行きファイルが在れば、実行する
if [ ! -e ファイル名 ]; then
	処理内容
exit 0
fi

########!!!変数の文字が空じゃないときのみ処理########
空じゃないときのみ(変数に値がある)

if [ -n "$STRING" ]; then
  #処理
fi
空のときのみ(変数に値がない)

if [ -z "$STRING" ]; then
  #処理
fi

#####IPアドレスの確認#####
ping localhost

########------------------------------------------------------------------########
エラー発生時 ログ確認場所

ネットワーク障害が発生した際に、ログに何らかの障害情報が記載されている可能性が高いと考えられます。具体的には下記のログを確認することが有効と考えられます。



var/log/messages
一般的なログ。サービス起動時の出力など

/var/log/secure
認証、セキュリティ関連のログ

/var/log/maillog
メール関連のログ

/var/log/dmesg
カーネルが出力したメッセージのログ。ハードの故障の際にはこちら。

/var/log/httpd
WEBサーバに関連のログ

######カーネル、OS情報の表示######
hostnamectl


######ホスト名の変更######
再起動すると元に戻る。
設定ファイルとしては/etc/hostnameがあるが、ここが反映されません。

hostname ホスト名
オプション
-a	ホストの別名（alias）があれば表示する
-d	NSドメインの名前を表示する
-f	FQDN（Fully Qualified Domain Name）を表示する
-A	全てのFQDN（FQDNs）を表示する
-i	ホストのIPアドレスを表示する。設定時も使用可能
-I	全てのアドレスを表示する
-s	短い形式のホスト名（最初のドットまでの名前）を表示する
-y	NISドメイン名を表示する。設定時も使用可能
-v	起こっていることを逐一表示する（verboseモード）
-F	新しいホスト名を指定したファイルから読みこむ（「#」から始まる行はコメント扱い）


######恒久的に変更する場合######
hostnamectl set-hostname --static ホスト名


######全てのサービス一覧######
定義されているサービスを全て見たい場合

systemctl list-unit-files --type=service
systemctl list-unit-files -t service


######Linux環境にアプリをインストール######

######Makefileを生成######
三点セット
perl Makefile.PL
make
make install


または
./configure
make
make install

################################################
######ファイヤーウォール  (firewall-cmd) 設定######

######ﾌｧｲﾔｰｳｫｰﾙ の状態を表示######
firewall-cmd --state

######追加、有効化されている項目を全て表示######
firewall-cmd --list-all

######追加、有効化されているサービスを全て表示######
firewall-cmd --list-servicse

######サービスを有効化######
firewall-cmd --add-services

######サービスを追加する######
firewall-cmd --add-service=http

######ポートを削除する######
firewall-cmd --remove-port=123/udp

######ポートを追加する######
firewall-cmd --add-port=80/tcp

######firewalld の再起動/再読み込み時に反映させる######
サーバ再起動や firewalld reload 時に恒久的に反映させるためには、
コマンドのどこかに --permanent を入れる（前でも後でも良い）。
firewall-cmd --permanent --add-port=123/udp

######firewalld の再読み込み
firewall-cmd --reload

######ファイヤーウォール  の設定を表示######
systemctl status firewalld.service


########firewall-cmd --list-all で表示されるパラメータの意味########

default ⇒ Zoneによって以下3つのいずれかになる。publicの場合はREJECTの動作になる。

ACCEPT ⇒ 全てを許可するようになる。

DROP ⇒ 拒否ルールに引っ掛かった通信はルール通り拒否し、何も返さない。

REJECT ⇒ 拒否ルールに引っ掛かった通信はルール通り拒否し、ICMP の Type 3(Destination Unreachable) の Code 10 ( Host administratively prohibited) を返す。

DROPとREJECTの違いは、上記のようにICMPのエラーコードを返すか返さないかです。



########------------------------------------------------------------------########
パッケージをインストール、更新、アンインストール）
######インストールする######
rpm -ivh パッケージファイル名

######パッケージを更新する######
rpm -Uvh パッケージファイル名

######パッケージをアンインストールする######
rpm -evh パッケージ名


#####IPアドレスの確認#####
ping localhost

########------------------------------------------------------------------########
Ruby

# サーバーを立てる
rails s -b 0.0.0.0


mod_wsgiのインストール
mod_wsgi(ウィズギー)は、PythonフレームワークとApache2を連携させるためのインターフェースモジュール。らしい。
wsgi無しでは、PythonをWebサーバーと連携できないので、インストールが必要。※一応cgiを使うという手もある

sudo apt-get -y install libapache2-mod-wsgi


########------------------------------------------------------------------########

 UnitがServiceとして認識されたか確認する
systemctl list-unit-files --type=serviceの出力に現れればOK

sudo systemctl list-unit-files --type=service | grep hello


######4ucms再起動コマンド########

systemctl enable 4ucms

